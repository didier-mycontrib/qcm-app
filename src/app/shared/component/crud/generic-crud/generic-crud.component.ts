import { Component,  inject,  input, InputSignal, OnInit, TemplateRef } from '@angular/core';
import { GenericCrudContext } from '../GenericCrudContext';
import { FormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';
import { GenericCrudService } from '../../../service/generic-crud-service';
import { messageFromError } from '../../../util/util';
import { GenCrudTableComponent } from '../gen-crud-table/gen-crud-table.component';
import { GenCrudFormComponent } from '../gen-crud-form/gen-crud-form.component';
import { GenCrudParamComponent } from '../gen-crud-param/gen-crud-param.component';
import { MatDialog } from '@angular/material/dialog';
import { ConfirmDialogComponent } from '../../generic/confirm-dialog/confirm-dialog.component';

@Component({
  selector: 'generic-crud',
  imports:[CommonModule,FormsModule,
    GenCrudTableComponent,
    GenCrudFormComponent,GenCrudParamComponent],
  templateUrl: './generic-crud.component.html',
  styleUrls: ['./generic-crud.component.scss']
})
export class GenericCrudComponent implements OnInit {

  public genericCrudContext  :InputSignal<GenericCrudContext<any,any> | null> 
    = input(null,{transform: (genericCrudContext)=> <GenericCrudContext<any,any>><any> genericCrudContext });

  public genericCrudService : InputSignal<GenericCrudService<any> | null> 
     = input(null,{transform: (genericCrudService)=> <GenericCrudService<any>><any> genericCrudService });


  public optionalSpecificSubFormTemplateRef = input<TemplateRef<any>>();

  //this.genericCrudContext?.tabObjects of type T[]

  idKeyName = "id"; //or "code" or "ref" or "num" or ...
  withAutoGeneratedId = false; // or true 

  selectedObject : any ;
  entityTypeName : string = "entity"; //or "devise" or "product" ...

  //[(ngModel)]="deviseTemp.code" , ....
  objectTemp : any = null;
  
  collectionMessage /*: string*/ ="";
  formMessage/*: string*/ ="";
  
  mode  = "newOne"; //or "exitingOne"

  subFormCompRef : any = input();
 
  constructor() {
   }

  onReload(){
    this.genericCrudContext()!.onFindObjectsWithFilterDefs$(this.genericCrudService())
    .subscribe(
      { next: (tabObjects)=>{ this.collectionMessage = this.genericCrudContext()?.entityTypeName + " reloaded";
                              if(this.genericCrudContext())
                                 this.genericCrudContext()!.tabObjects = tabObjects;  } ,
       error: (err)=>{ this.collectionMessage = messageFromError(err,"erreur: echec rechargement liste via filtre"); }
    });
    this.objectTemp=this.genericCrudContext()?.contextHelper.objectHelper().buildEmptyObject();
  }

  ngOnInit(): void {
    console.log("GenericCrudComponent.ngOnInit(): filterDefs="+JSON.stringify(this.genericCrudContext()?.filterDefs));
    if(this.genericCrudContext()==null)return;
    this.entityTypeName=this.genericCrudContext()?.entityTypeName??"entity";
    this.idKeyName = this.genericCrudContext()!.contextHelper.objectHelper().getIdKeyName();
    this.withAutoGeneratedId=this.genericCrudContext()!.contextHelper.objectHelper().withAutoGeneratedId();
    this.genericCrudContext()!.onGetAllObjects$(this.genericCrudService())
    .subscribe(
      { next: (tabObjects)=>{ this.collectionMessage = this.genericCrudContext()?.entityTypeName + " loaded";
                              if(this.genericCrudContext())
                                 this.genericCrudContext()!.tabObjects = tabObjects;  } ,
       error: (err)=>{ this.collectionMessage = messageFromError(err,"erreur: echec chargement liste Devises"); }
    });
    this.objectTemp=this.genericCrudContext()?.contextHelper.objectHelper().buildEmptyObject();
  }

  onActionEvent(actionType:string){
    switch(actionType){
      case "new": this.onNew(); break;
      case "add": this.onAdd(); break;
      case "update": this.onUpdate(); break;
      case "delete": this.onDeleteAfterConfirm(); break;
    }
  }

  onNew(){
    this.selectedObject=undefined; this.mode='newOne';
    this.formMessage="new one (to edit before add)"
    this.objectTemp = this.genericCrudContext()?.contextHelper.objectHelper().buildEmptyObject();
  }

  onAdd(){
    this.genericCrudService()?.postEntityObject$(this.objectTemp)
    .subscribe(
     { next: (savedObject)=>{ this.formMessage = this.genericCrudContext()?.entityTypeName + " added"
                              + " with " + this.extractKeyValueString(savedObject);
                              this.collectionMessage = this.formMessage;
                              this.addClientSide(savedObject); } ,
      error: (err)=>{ this.formMessage = messageFromError(err,"error: echec post",true,true); }
   });
  }

  addClientSide(savedObject:any){
    this.genericCrudContext()?.tabObjects.push(savedObject);
    this.onNew();
  }

  readonly dialog = inject(MatDialog); 

  onDeleteAfterConfirm(){
   ConfirmDialogComponent.confirmDialog$(this.dialog,"confirm delete")
      .subscribe( (isOk : boolean ) => {
        if(isOk) 
          this.onDelete();
      });
  }

  onDelete(){
    if(this.selectedObject){
         let id = this.genericCrudContext()?.contextHelper.objectHelper().getId(this.selectedObject);
         this.genericCrudContext()?.onDeleteObject$(id,this.genericCrudService())
             .subscribe(
              { next: ()=>{ this.collectionMessage = this.genericCrudContext()?.entityTypeName + " deleted";
                            console.log("GenericCrudComponent.onDelete() collectionMessage="+this.collectionMessage);
                            this.deleteClientSide(); } ,
               error: (err)=>{ this.formMessage = messageFromError(err,"error: echec suppression",true,true); }
            });
    }
  }

  deleteClientSide(){
    if(this.selectedObject){
      let indexToDelete = -1;
      this.genericCrudContext()?.tabObjects.forEach((obj,index)=>{if(obj==this.selectedObject) indexToDelete=index; });
      if(indexToDelete>=0){
        this.genericCrudContext()?.tabObjects.splice(indexToDelete,1);
      }
    }
    this.onNew();
  }

  onUpdate(){
    this.genericCrudContext()?.onUpdateObject$(this.objectTemp,this.genericCrudService())
    .subscribe(
     { next: (updatedObject)=>{  this.formMessage = this.genericCrudContext()?.entityTypeName + " updated";
                   this.collectionMessage = this.formMessage;
                   this.updateClientSide(updatedObject); } ,
      error: (err)=>{ this.formMessage = messageFromError(err,"error: echec update",true,true);}
   });
  }

  updateClientSide(updatedObject:any){
  //test imposé par typescript sur this.selectedObject potentiellement undefined
   if(this.selectedObject != undefined){
    //Rappel: this.selectedObject est ici une référence
    //qui pointe directement sur le i eme objet du tableau this.tabObjects
    //(selon ligne sélectionnée)
        this.copyObjectProperties(updatedObject, this.selectedObject);
   }
  }

  //fonction évenementielle à appeler lorsque l'on
  //va sélectionner une des lignes du tableau
  onSelectObject(o : any ){
    //NB: o:any est passé par référence (comportement de java/javascript)
    //et donc ici o et this.selectedObject référencent
    //directement un des objets du tableau this.tabObjects
      this.selectedObject = o;  this.mode='existingOne';
      //via un clonage explicite , this.objectTemp est une copie
      //indépendante de this.selectedObject (et pas une référence sur l'objet original)
      this.objectTemp = this.cloneObject(this.selectedObject);
      let id = this.genericCrudContext()?.contextHelper.objectHelper().getId(this.selectedObject);
      this.collectionMessage =  id + " selected";
      this.formMessage =  "current "+ this.entityTypeName + "=" + id;
  }

  

  cloneObject(obj:any){
    return JSON.parse(JSON.stringify(obj));
  }

  copyObjectProperties(source:object, target : object){
   let arrayOfPropKeys = Reflect.ownKeys(source);
   for(let key of arrayOfPropKeys){
    Reflect.set(target, key, Reflect.get(source,key));
   }
  }

  objectKeysArray(obj:object):any[]{
    return Reflect.ownKeys(obj);
  }

  essentialKeysArray():string[]{
    return this.genericCrudContext()!.contextHelper.objectHelper().essentialFieldNames();
  }

  extractKeyValueString(obj:any){
    let keyValue = obj[this.idKeyName];
    return `${this.idKeyName}=${keyValue}`;
  }

  

  objectValuesArray(obj:object):any[]{
   let arrayOfPropKeys = Reflect.ownKeys(obj);
   let valuesArray = [];
   for(let key of arrayOfPropKeys){
    valuesArray.push(Reflect.get(obj,key));
   }
   return valuesArray;
  }

  objectEssentialValuesArray(obj:object):any[]{
    let arrayOfPropKeys = this.essentialKeysArray();
    let valuesArray = [];
    for(let key of arrayOfPropKeys){
     valuesArray.push(Reflect.get(obj,key));
    }
    return valuesArray;
   }

   isNoEditableId(attrName:string){
    if(this.idKeyName != attrName) return false;
    /* else is key attr*/
    if(this.withAutoGeneratedId)return true;
    if(this.selectedObject!=null) return true;
    return false;
   }

}
